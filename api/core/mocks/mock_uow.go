// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lyubomirr/meme-generator-app/core/repositories (interfaces: UnitOfWork)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repositories "github.com/lyubomirr/meme-generator-app/core/repositories"
)

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockUnitOfWork) BeginTransaction() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockUnitOfWorkMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockUnitOfWork)(nil).BeginTransaction))
}

// CommitTransaction mocks base method.
func (m *MockUnitOfWork) CommitTransaction() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockUnitOfWorkMockRecorder) CommitTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockUnitOfWork)(nil).CommitTransaction))
}

// GetFileRepository mocks base method.
func (m *MockUnitOfWork) GetFileRepository() repositories.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileRepository")
	ret0, _ := ret[0].(repositories.File)
	return ret0
}

// GetFileRepository indicates an expected call of GetFileRepository.
func (mr *MockUnitOfWorkMockRecorder) GetFileRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileRepository", reflect.TypeOf((*MockUnitOfWork)(nil).GetFileRepository))
}

// GetMemeRepository mocks base method.
func (m *MockUnitOfWork) GetMemeRepository() repositories.Meme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemeRepository")
	ret0, _ := ret[0].(repositories.Meme)
	return ret0
}

// GetMemeRepository indicates an expected call of GetMemeRepository.
func (mr *MockUnitOfWorkMockRecorder) GetMemeRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemeRepository", reflect.TypeOf((*MockUnitOfWork)(nil).GetMemeRepository))
}

// GetTemplateRepository mocks base method.
func (m *MockUnitOfWork) GetTemplateRepository() repositories.Template {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateRepository")
	ret0, _ := ret[0].(repositories.Template)
	return ret0
}

// GetTemplateRepository indicates an expected call of GetTemplateRepository.
func (mr *MockUnitOfWorkMockRecorder) GetTemplateRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateRepository", reflect.TypeOf((*MockUnitOfWork)(nil).GetTemplateRepository))
}

// GetUserRepository mocks base method.
func (m *MockUnitOfWork) GetUserRepository() repositories.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRepository")
	ret0, _ := ret[0].(repositories.User)
	return ret0
}

// GetUserRepository indicates an expected call of GetUserRepository.
func (mr *MockUnitOfWorkMockRecorder) GetUserRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRepository", reflect.TypeOf((*MockUnitOfWork)(nil).GetUserRepository))
}

// RollbackTransaction mocks base method.
func (m *MockUnitOfWork) RollbackTransaction() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockUnitOfWorkMockRecorder) RollbackTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockUnitOfWork)(nil).RollbackTransaction))
}
